// <auto-generated />
using System;
using CleanArchitecture.Persistence.EFCore.Context.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanArchitecture.Persistence.Migrations
{
    [DbContext(typeof(SqlServerDbContext))]
    [Migration("20241002162428_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Circulation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CopyCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCalculatePrice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckFile")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCmyk")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomCirculation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomPage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomSize")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("MaxCirculation")
                        .HasColumnType("int");

                    b.Property<float>("MaxLength")
                        .HasColumnType("real");

                    b.Property<int>("MaxPage")
                        .HasColumnType("int");

                    b.Property<float>("MaxWidth")
                        .HasColumnType("real");

                    b.Property<int>("MinCirculation")
                        .HasColumnType("int");

                    b.Property<float>("MinLength")
                        .HasColumnType("real");

                    b.Property<int>("MinPage")
                        .HasColumnType("int");

                    b.Property<float>("MinWidth")
                        .HasColumnType("real");

                    b.Property<string>("PageCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PrintSide")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<byte>("ProductType")
                        .HasColumnType("tinyint");

                    b.Property<int>("SheetDimensionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.Property<float>("cutMargin")
                        .HasColumnType("real");

                    b.Property<float>("printMargin")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Rangarang_Product", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdtId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("IsJeld")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<byte>("Side")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rangarang_ProductAdt", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductAdtId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAdtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdtId");

                    b.HasIndex("ProductAdtTypeId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("ProductAdtPrice");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdtTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ProductAdtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdtId");

                    b.ToTable("Rangarang_ProductAdtType", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte>("CalcType")
                        .HasColumnType("tinyint");

                    b.Property<int>("EndCirculation")
                        .HasColumnType("int");

                    b.Property<bool>("IsIncreased")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<byte>("PrintSide")
                        .HasColumnType("tinyint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("StartCirculation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rangarang_ProductDeliver", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliverSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductDeliverId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductDeliverId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductDeliverSize");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsCombinedMaterial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomCirculation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rangarang_ProductMaterial", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterialAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MaterialAttributeId")
                        .HasColumnType("int");

                    b.Property<int>("productMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialAttributeId");

                    b.ToTable("Rangarang_ProductMaterialAttribute", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Circulation")
                        .HasColumnType("int");

                    b.Property<int>("CopyCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsDoubleSided")
                        .HasColumnType("bit");

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("PageCount")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductMaterialAttributeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ProductMaterialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPrintKindId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductMaterialAttributeId");

                    b.HasIndex("ProductMaterialId");

                    b.HasIndex("ProductPrintKindId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("Rangarang_ProductPrice", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrintKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsJeld")
                        .HasColumnType("bit");

                    b.Property<int>("PrintKind")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rangarang_ProductPrintKind", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SheetCount")
                        .HasColumnType("int");

                    b.Property<bool>("length")
                        .HasColumnType("bit");

                    b.Property<int>("sheetDimensionId")
                        .HasColumnType("int");

                    b.Property<bool>("width")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Rangarang_ProductSize", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.IdentityEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Rangarang_IdentityRole", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.IdentityEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Rangarang_IdentityUser", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Rangarang_IdentityRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rangarang_IdentityUserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("Rangarang_IdentityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("Rangarang_IdentityUserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("Rangarang_IdentityUserToken", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdt", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", "Product")
                        .WithMany("ProductAdts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtPrice", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdt", "ProductAdt")
                        .WithMany("ProductAdtPrices")
                        .HasForeignKey("ProductAdtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtType", "ProductAdtType")
                        .WithMany("ProductAdtPrices")
                        .HasForeignKey("ProductAdtTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrice", "ProductPrice")
                        .WithMany("ProductAdtPrices")
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAdt");

                    b.Navigation("ProductAdtType");

                    b.Navigation("ProductPrice");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtType", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdt", "ProductAdt")
                        .WithMany("ProductAdtTypes")
                        .HasForeignKey("ProductAdtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductAdt");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliver", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", "Product")
                        .WithMany("ProductDelivers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliverSize", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliver", "ProductDeliver")
                        .WithMany("ProductDeliverSizes")
                        .HasForeignKey("ProductDeliverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductSize", "ProductSize")
                        .WithMany("ProductDeliverSizes")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductDeliver");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterial", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterialAttribute", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterial", "ProductMaterial")
                        .WithMany("ProductMaterialAttributes")
                        .HasForeignKey("MaterialAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductMaterial");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrice", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterialAttribute", "ProductMaterialAttribute")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductMaterialAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterial", "ProductMaterial")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductMaterialId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrintKind", "ProductPrintKind")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductPrintKindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductSize", "ProductSize")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductMaterial");

                    b.Navigation("ProductMaterialAttribute");

                    b.Navigation("ProductPrintKind");

                    b.Navigation("ProductSize");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrintKind", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", "Product")
                        .WithMany("ProductPrintKinds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductSize", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", "Product")
                        .WithMany("ProductSizes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Entities.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.Product", b =>
                {
                    b.Navigation("ProductAdts");

                    b.Navigation("ProductDelivers");

                    b.Navigation("ProductMaterials");

                    b.Navigation("ProductPrintKinds");

                    b.Navigation("ProductSizes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdt", b =>
                {
                    b.Navigation("ProductAdtPrices");

                    b.Navigation("ProductAdtTypes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductAdtType", b =>
                {
                    b.Navigation("ProductAdtPrices");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductDeliver", b =>
                {
                    b.Navigation("ProductDeliverSizes");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterial", b =>
                {
                    b.Navigation("ProductMaterialAttributes");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductMaterialAttribute", b =>
                {
                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrice", b =>
                {
                    b.Navigation("ProductAdtPrices");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductPrintKind", b =>
                {
                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Entities.AppEntities.RangarangEnitities.ProductSize", b =>
                {
                    b.Navigation("ProductDeliverSizes");

                    b.Navigation("ProductPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
